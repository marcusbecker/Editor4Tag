/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.mvbos.etag.ui.selector;

import java.awt.Color;
import java.awt.Font;
import java.awt.Frame;
import java.awt.GraphicsEnvironment;

/**
 *
 * @author Marcus Becker
 */
public class MyFontSelector extends javax.swing.JDialog {

    private Font selectedFont;
    private int fontSize;
    private int fontStyle;
    private String fontName;

    private Color foreColor;
    private Color backColor;

    private IMyFontSelector event;

    /**
     * Creates new form MyFontSelector
     *
     * @param parent
     * @param modal
     */
    public MyFontSelector(Frame parent, boolean modal) {
        this(parent, modal, null);
    }

    /**
     * Creates new form MyFontSelector
     *
     * @param parent
     * @param modal
     * @param font
     */
    public MyFontSelector(Frame parent, boolean modal, Font font) {
        super(parent, modal);
        initComponents();

        lstFont.setModel(new javax.swing.AbstractListModel() {
            private final GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
            private final String[] fonts = env.getAvailableFontFamilyNames();

            @Override
            public int getSize() {
                return fonts.length;
            }

            @Override
            public Object getElementAt(int i) {
                return fonts[i];
            }
        });

        if (font == null) {
            font = getFont();
        }

        fontSize = font.getSize();
        fontStyle = font.getStyle();
        fontName = font.getFamily();

        lstStyle.setSelectedIndex(fontStyle);
        lstFont.setSelectedValue(fontName, true);
        lstSize.setSelectedValue(String.valueOf(fontSize), true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tfFont = new javax.swing.JTextField();
        lblFont = new javax.swing.JLabel();
        tfStyle = new javax.swing.JTextField();
        tfSize = new javax.swing.JTextField();
        lblStyle = new javax.swing.JLabel();
        lblSize = new javax.swing.JLabel();
        lblDemo = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstFont = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstSize = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstStyle = new javax.swing.JList();
        btnCancel = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        lblForeground = new javax.swing.JLabel();
        lblBackgroundColor = new javax.swing.JLabel();
        btnInvertColor = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Font selector");

        tfFont.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfFontKeyReleased(evt);
            }
        });

        lblFont.setText("Font:");

        lblStyle.setText("Style:");

        lblSize.setText("Size:");

        lblDemo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDemo.setText("aAbBcCdD uUvVxXyYzZ 0123456789");
        lblDemo.setOpaque(true);

        lstFont.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstFont.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstFontValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstFont);

        lstSize.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "8", "9", "10", "11", "12", "14", "16", "18", "20", "22", "24", "26", "28", "33", "36", "38", "42", "44", "48", "54", "58", "64", "68", "74", "78" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        lstSize.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstSize.setToolTipText("");
        lstSize.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstSizeValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(lstSize);

        lstStyle.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Plain", "Bold", "Italic", "BoldItalic" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        lstStyle.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstStyle.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstStyleValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(lstStyle);

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        lblForeground.setBackground(new java.awt.Color(102, 204, 255));
        lblForeground.setToolTipText("Foreground color");
        lblForeground.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblForeground.setOpaque(true);
        lblForeground.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblForegroundMouseClicked(evt);
            }
        });

        lblBackgroundColor.setBackground(new java.awt.Color(255, 255, 255));
        lblBackgroundColor.setToolTipText("Background color");
        lblBackgroundColor.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblBackgroundColor.setOpaque(true);
        lblBackgroundColor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblBackgroundColorMouseClicked(evt);
            }
        });

        btnInvertColor.setText("Invert");
        btnInvertColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInvertColorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDemo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfFont)
                            .addComponent(lblFont, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                            .addComponent(tfStyle)
                            .addComponent(lblStyle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                            .addComponent(tfSize)
                            .addComponent(lblSize, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblForeground, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblBackgroundColor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnInvertColor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblBackgroundColor, lblForeground});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSize)
                            .addComponent(lblFont, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfFont, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane1)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblStyle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfStyle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblDemo, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnCancel)
                        .addComponent(btnSave)
                        .addComponent(btnInvertColor))
                    .addComponent(lblBackgroundColor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblForeground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        selectedFont = null;
        if (event != null) {
            event.cancelAction(this);
        }

        dispose();

    }//GEN-LAST:event_btnCancelActionPerformed

    private void lstFontValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstFontValueChanged
        if (evt.getValueIsAdjusting() && lstFont.getSelectedValue() != null) {
            fontName = (String) lstFont.getSelectedValue();
            updateDemo();
        }

    }//GEN-LAST:event_lstFontValueChanged

    private void lstStyleValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstStyleValueChanged
        if (evt.getValueIsAdjusting() && lstStyle.getSelectedValue() != null) {
            switch (lstStyle.getSelectedIndex()) {
                case 1:
                    fontStyle = Font.BOLD;
                    break;
                case 2:
                    fontStyle = Font.ITALIC;
                    break;
                case 3:
                    fontStyle = Font.BOLD + Font.ITALIC;
                    break;
                default:
                    fontStyle = Font.PLAIN;
            }

            updateDemo();
        }
    }//GEN-LAST:event_lstStyleValueChanged

    private void lstSizeValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstSizeValueChanged
        if (evt.getValueIsAdjusting() && lstSize.getSelectedValue() != null) {
            fontSize = Integer.parseInt((String) lstSize.getSelectedValue());
            updateDemo();
        }
    }//GEN-LAST:event_lstSizeValueChanged

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed

        if (event != null) {
            event.saveAction(this);
        }
        dispose();

    }//GEN-LAST:event_btnSaveActionPerformed

    private void lblForegroundMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblForegroundMouseClicked
        MyColorSelector msc = new MyColorSelector(null, true, foreColor);
        msc.setEvent(new IMyFontSelector() {

            @Override
            public void saveAction(Object obj) {
                MyColorSelector cs = (MyColorSelector) obj;
                foreColor = cs.getSelectedColor();
                updateDemo();
            }

            @Override
            public void cancelAction(Object obj) {
            }

            @Override
            public void change(Object obj) {
            }
        });
        msc.setVisible(true);

    }//GEN-LAST:event_lblForegroundMouseClicked

    private void lblBackgroundColorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblBackgroundColorMouseClicked
        MyColorSelector msc = new MyColorSelector(null, true, backColor);
        msc.setEvent(new IMyFontSelector() {

            @Override
            public void saveAction(Object obj) {
                MyColorSelector cs = (MyColorSelector) obj;
                backColor = cs.getSelectedColor();
                updateDemo();
            }

            @Override
            public void cancelAction(Object obj) {
            }

            @Override
            public void change(Object obj) {
            }
        });
        msc.setVisible(true);
    }//GEN-LAST:event_lblBackgroundColorMouseClicked

    private void btnInvertColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInvertColorActionPerformed
        setColors(backColor, foreColor);

    }//GEN-LAST:event_btnInvertColorActionPerformed

    private void tfFontKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfFontKeyReleased
        String text = tfFont.getText();
        if (!text.isEmpty()) {
           lstFont.setSelectedValue(text, true);
        }

    }//GEN-LAST:event_tfFontKeyReleased

    private void updateDemo() {
        selectedFont = new Font(fontName, fontStyle, fontSize);
        lblDemo.setFont(selectedFont);

        if (foreColor != null) {
            lblDemo.setForeground(foreColor);
            lblForeground.setBackground(foreColor);
        }

        if (backColor != null) {
            lblDemo.setBackground(backColor);
            lblBackgroundColor.setBackground(backColor);
        }
    }

    public int getFontSize() {
        return fontSize;
    }

    public void setFontSize(int fontSize) {
        this.fontSize = fontSize;
    }

    public int getFontStyle() {
        return fontStyle;
    }

    public void setFontStyle(int fontStyle) {
        this.fontStyle = fontStyle;
    }

    public String getFontName() {
        return fontName;
    }

    public void setFontName(String fontName) {
        this.fontName = fontName;
    }

    public Color getSelectedForegroundColor() {
        return foreColor;
    }

    public Color getSelectedBackgroundColor() {
        return backColor;
    }

    public Font getSelectedFont() {
        return selectedFont;
    }

    public void setEvent(IMyFontSelector event) {
        this.event = event;
    }

    public void setColors(Color foreground, Color background) {
        this.foreColor = foreground;
        this.backColor = background;

        if (foreColor != null) {
            lblDemo.setForeground(foreColor);
            lblForeground.setBackground(foreColor);
        }

        if (backColor != null) {
            lblDemo.setBackground(backColor);
            lblBackgroundColor.setBackground(backColor);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnInvertColor;
    private javax.swing.JButton btnSave;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblBackgroundColor;
    private javax.swing.JLabel lblDemo;
    private javax.swing.JLabel lblFont;
    private javax.swing.JLabel lblForeground;
    private javax.swing.JLabel lblSize;
    private javax.swing.JLabel lblStyle;
    private javax.swing.JList lstFont;
    private javax.swing.JList lstSize;
    private javax.swing.JList lstStyle;
    private javax.swing.JTextField tfFont;
    private javax.swing.JTextField tfSize;
    private javax.swing.JTextField tfStyle;
    // End of variables declaration//GEN-END:variables

}
